basePath: /
definitions:
  dto.BeerStyleRequest:
    properties:
      max_temperature:
        example: 10
        type: number
      min_temperature:
        example: 7
        type: number
      name:
        example: IPA
        type: string
    required:
    - max_temperature
    - min_temperature
    - name
    type: object
  dto.BeerStyleResponse:
    properties:
      created_at:
        example: "2024-01-15T10:30:00Z"
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      max_temperature:
        example: 10
        type: number
      min_temperature:
        example: 7
        type: number
      name:
        example: IPA
        type: string
      updated_at:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: Beer style not found
        type: string
    type: object
  dto.LoginRequest:
    properties:
      password:
        example: "123456"
        type: string
      username:
        example: logan
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 300
        type: integer
      not-before-policy:
        example: 0
        type: integer
      refresh_expires_in:
        example: 1800
        type: integer
      refresh_token:
        example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9...
        type: string
      scope:
        example: profile email
        type: string
      session_state:
        example: 4d81e047-491f-47b2-8ce7-59e6c9e2fb9c
        type: string
      token_type:
        example: Bearer
        type: string
    type: object
  dto.RecommendationResponse:
    properties:
      beerStyle:
        example: IPA
        type: string
      playlist:
        $ref: '#/definitions/github_com_GoLogann_karhub-beer_infra_spotify.PlaylistInfo'
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: logan@example.com
        type: string
      password:
        example: "123456"
        type: string
      roles:
        example:
        - '["user"]'
        items:
          type: string
        type: array
      username:
        example: logan
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.RegisterResponse:
    properties:
      message:
        example: user created
        type: string
    type: object
  dto.SuccessMessage:
    properties:
      message:
        example: beer style deleted
        type: string
    type: object
  dto.TemperatureRequest:
    properties:
      temperature:
        example: -7
        type: number
    required:
    - temperature
    type: object
  github_com_GoLogann_karhub-beer_infra_spotify.PlaylistInfo:
    properties:
      id:
        type: string
      image:
        type: string
      link:
        type: string
      name:
        type: string
      tracks:
        items:
          $ref: '#/definitions/github_com_GoLogann_karhub-beer_infra_spotify.TrackInfo'
        type: array
    type: object
  github_com_GoLogann_karhub-beer_infra_spotify.TrackInfo:
    properties:
      artist:
        type: string
      id:
        type: string
      link:
        type: string
      name:
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: |-
    API para gerenciar estilos de cerveja e encontrar o estilo ideal por temperatura

    Esta API faz parte do desafio de criar uma cervejeira inteligente.
    Ela permite gerenciar estilos de cerveja (CRUD) e recomendar o melhor estilo
    baseado na temperatura, incluindo uma playlist do Spotify relacionada ao estilo.

    ## Autenticação
    Esta API utiliza JWT Bearer tokens para autenticação.
    Algumas operações requerem role de admin.

    ## Regras de Negócio
    - Todo estilo de cerveja tem uma temperatura mínima e máxima
    - O cálculo para seleção do estilo é baseado na média das temperaturas
    - Em caso de empate, a ordenação é alfabética
    - A API integra com Spotify para buscar playlists relacionadas ao estilo
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: KarHub Beer API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Autentica usuário e retorna token JWT (Keycloak)
      parameters:
      - description: Credenciais de login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login realizado com sucesso
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Credenciais inválidas
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login de usuário
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Cria um novo usuário no sistema
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Usuário criado com sucesso
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Registrar novo usuário
      tags:
      - Authentication
  /api/v1/beers:
    get:
      consumes:
      - application/json
      description: Retorna uma lista com todos os estilos de cerveja cadastrados
      produces:
      - application/json
      responses:
        "200":
          description: Lista de estilos de cerveja
          schema:
            items:
              $ref: '#/definitions/dto.BeerStyleResponse'
            type: array
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Listar todos os estilos de cerveja
      tags:
      - Beer Styles
    post:
      consumes:
      - application/json
      description: Cria um novo estilo de cerveja no sistema (requer autenticação
        de admin)
      parameters:
      - description: Dados do estilo de cerveja
        in: body
        name: beer
        required: true
        schema:
          $ref: '#/definitions/dto.BeerStyleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Estilo de cerveja criado com sucesso
          schema:
            $ref: '#/definitions/dto.BeerStyleResponse'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Acesso negado - requer role admin
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Criar novo estilo de cerveja
      tags:
      - Beer Styles
  /api/v1/beers/{id}:
    delete:
      description: Remove um estilo de cerveja do sistema (requer autenticação de
        admin)
      parameters:
      - description: UUID do estilo de cerveja
        format: uuid
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Estilo de cerveja deletado com sucesso
          schema:
            $ref: '#/definitions/dto.SuccessMessage'
        "400":
          description: UUID inválido
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Acesso negado - requer role admin
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Estilo de cerveja não encontrado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deletar estilo de cerveja
      tags:
      - Beer Styles
    get:
      consumes:
      - application/json
      description: Retorna um estilo de cerveja específico pelo seu UUID
      parameters:
      - description: UUID do estilo de cerveja
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Estilo de cerveja encontrado
          schema:
            $ref: '#/definitions/dto.BeerStyleResponse'
        "400":
          description: UUID inválido
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Estilo de cerveja não encontrado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Buscar estilo de cerveja por ID
      tags:
      - Beer Styles
    put:
      consumes:
      - application/json
      description: Atualiza um estilo de cerveja existente (requer autenticação de
        admin)
      parameters:
      - description: UUID do estilo de cerveja
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: Dados atualizados do estilo de cerveja
        in: body
        name: beer
        required: true
        schema:
          $ref: '#/definitions/dto.BeerStyleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Estilo de cerveja atualizado com sucesso
          schema:
            $ref: '#/definitions/dto.BeerStyleResponse'
        "400":
          description: Dados inválidos
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Acesso negado - requer role admin
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Estilo de cerveja não encontrado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Atualizar estilo de cerveja
      tags:
      - Beer Styles
  /api/v1/beers/recommend:
    post:
      consumes:
      - application/json
      description: Retorna o estilo de cerveja mais adequado para a temperatura informada
        junto com uma playlist do Spotify
      parameters:
      - description: Temperatura para recomendação
        in: body
        name: temperature
        required: true
        schema:
          $ref: '#/definitions/dto.TemperatureRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Recomendação de cerveja e playlist
          schema:
            $ref: '#/definitions/dto.RecommendationResponse'
        "400":
          description: Temperatura inválida
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Não autorizado
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Nenhum estilo de cerveja encontrado ou playlist não disponível
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Erro interno do servidor
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Recomendação de cerveja por temperatura
      tags:
      - Beer Recommendation
securityDefinitions:
  BearerAuth:
    description: Digite 'Bearer ' seguido do seu JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
